///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2006-2017 Esper Team. All rights reserved.                           /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System;
using com.espertech.esper.client;
using com.espertech.esper.compat;
using com.espertech.esper.compat.container;
using com.espertech.esper.compat.logging;
using com.espertech.esper.compat.threading;
using com.espertech.esper.epl.expression.core;
using com.espertech.esper.epl.expression;
using com.espertech.esper.epl.variable;

namespace com.espertech.esper.filter
{
    /// <summary>
    /// Adapter for use by <see cref="FilterParamIndexBooleanExpr"/> to evaluate bool expressions, providing
    /// events per stream to expression nodes. Generated by @{link FilterSpecParamExprNode} for
    /// bool expression filter parameters.
    /// </summary>
    public class ExprNodeAdapter
    {
        private static readonly ILog Log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        private readonly IThreadLocal<EventBean[]> _arrayPerThread;
        private readonly ExprNode _exprNode;
        private readonly ExprEvaluator _exprNodeEval;
        private readonly EventBean[] _prototype;
        private readonly VariableService _variableService;

        /// <summary>
        /// Ctor.
        /// </summary>
        /// <param name="exprNode">is the bool expression</param>
        /// <param name="prototype">is the row of events the we are matching on</param>
        /// <param name="variableService">for setting variable version for evaluating variables, if required</param>
        /// <param name="threadLocalManager">The thread local manager.</param>
        public ExprNodeAdapter(
            ExprNode exprNode,
            EventBean[] prototype,
            VariableService variableService,
            IThreadLocalManager threadLocalManager)
        {
            _exprNode = exprNode;
            _exprNodeEval = exprNode.ExprEvaluator;
            _variableService = variableService;
            _arrayPerThread = threadLocalManager.Create<EventBean[]>(CreateLocalData);

            if (prototype == null) {
                _prototype = new EventBean[1];
            }
            else {
                _prototype = prototype;
            }
        }

        /// <summary>
        /// Provides the _prototype events-per-stream where stream zero is the current stream
        /// and is filled when the expression is evaluated.
        /// </summary>
        public EventBean[] Prototype
        {
            get { return _prototype; }
        }

        /// <summary>
        /// Creates a local data object.
        /// </summary>
        /// <returns></returns>
        private EventBean[] CreateLocalData()
        {
            var eventsPerStream = new EventBean[_prototype.Length];
            Array.Copy(_prototype, 0, eventsPerStream, 0, _prototype.Length);
            return eventsPerStream;
        }

        /// <summary>
        /// Evaluate the bool expression given the event as a stream zero event.
        /// </summary>
        /// <param name="theEvent">is the stream zero event (current event)</param>
        /// <param name="exprEvaluatorContext">The expression evaluator context.</param>
        /// <returns>bool result of the expression</returns>
        public bool Evaluate(EventBean theEvent, ExprEvaluatorContext exprEvaluatorContext)
        {
            if (_variableService != null) {
                _variableService.SetLocalVersion();
            }
            EventBean[] eventsPerStream = _arrayPerThread.GetOrCreate();
            eventsPerStream[0] = theEvent;

            try {
                var result = (bool?) _exprNodeEval.Evaluate(new EvaluateParams(eventsPerStream, true, exprEvaluatorContext));
                return result ?? false;
            }
            catch (Exception ex) {
                Log.Error("Error evaluating expression '" + _exprNode.ToExpressionStringMinPrecedenceSafe() + "': " + ex.Message, ex);
                return false;
            }
        }
    }
} // End of namespace
