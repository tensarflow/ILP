///////////////////////////////////////////////////////////////////////////////////////
// Copyright (C) 2006-2017 Esper Team. All rights reserved.                           /
// http://esper.codehaus.org                                                          /
// ---------------------------------------------------------------------------------- /
// The software in this package is published under the terms of the GPL license       /
// a copy of which has been included with this distribution in the license.txt file.  /
///////////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.IO;

namespace com.espertech.esper.client.soda
{
    /// <summary>
    /// A stream of events that is generated by pattern matches. <para/>Patterns matches are events that match pattern expressions. Pattern expressions are built using <seealso cref="Patterns"/>.
    /// </summary>
    [Serializable]
    public class PatternStream : ProjectedStream
    {
        /// <summary>Ctor. </summary>
        public PatternStream() {
        }
    
        /// <summary>Creates a pattern stream from a pattern expression. </summary>
        /// <param name="expression">pattern expression</param>
        /// <returns>stream</returns>
        public static PatternStream Create(PatternExpr expression)
        {
            return new PatternStream(expression);
        }
    
        /// <summary>Creates a named pattern stream from a pattern expression. </summary>
        /// <param name="expression">pattern expression</param>
        /// <param name="optStreamName">is the pattern stream name (as-name)</param>
        /// <returns>stream</returns>
        public static PatternStream Create(PatternExpr expression, String optStreamName)
        {
            return new PatternStream(expression, optStreamName);
        }
    
        /// <summary>Ctor. </summary>
        /// <param name="expression">pattern expression</param>
        public PatternStream(PatternExpr expression)
            : this(expression, null)
        {
            
        }
    
        /// <summary>Ctor. </summary>
        /// <param name="expression">pattern expression</param>
        /// <param name="optStreamName">is the pattern stream name (as-name)</param>
        public PatternStream(PatternExpr expression, String optStreamName)
            : base(new List<View>(), optStreamName)
        {
            Expression = expression;
        }
    
        /// <summary>Ctor. </summary>
        /// <param name="expression">pattern expression</param>
        /// <param name="optStreamName">is the pattern stream name (as-name)</param>
        /// <param name="annotations">annotations on pattern-level, if any</param>
        public PatternStream(PatternExpr expression, String optStreamName, AnnotationPart[] annotations)
            : base(new List<View>(), optStreamName)
        {
            Expression = expression;
            Annotations = annotations;
        }

        /// <summary>Returns the pattern expression providing events to the stream. </summary>
        /// <value>pattern expression</value>
        public PatternExpr Expression { get; set; }

        /// <summary>Returns the pattern-level annotations, if any </summary>
        /// <value>pattern-level annotations</value>
        public AnnotationPart[] Annotations { get; set; }

        public override void ToEPLProjectedStream(TextWriter writer, EPStatementFormatter formatter)
        {
            writer.Write("pattern");
            if (Annotations != null) {
                foreach (var part in Annotations) {
                    writer.Write(' ');
                    part.ToEPL(writer);
                }
            }
            writer.Write(" [");
            if (Expression != null) {
                Expression.ToEPL(writer, PatternExprPrecedenceEnum.MINIMUM, formatter);
            }
            writer.Write(']');
        }
    
    	public override void ToEPLProjectedStreamType(TextWriter writer)
    	{
    		writer.Write("pattern");
    	}
    }
}
